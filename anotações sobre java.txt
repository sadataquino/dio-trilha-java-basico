--------------------------------------------------------JAVA---------------------------------------------------------------
O nome da class tem que ter o mesmo nome do arquivo, tem que ser coerente com o projeto que você almeja ou o resultado;
		|
public class NomeDoArquivo {

}
obs: a primeira letra da classe, por padrão, deve iniciar com letra maiuscula;

Se a classe é uma classe executavel, se ela tem a capacidade de realizar uma inicialização do projeto ou de forma independen
ela precisa ter um metodo principal "main";

obs: Isso é um método:
		|
public static void main(String [] args) {

	Tudo que for escrivo aqui estará dentro desse método, no caso:
		
		System.out.print("Escreva sua mensagem");
	
}
 [] -> Arrays
 args -> Argumentos
 Class -> System
 out -> Saída
 print -> Imprima
 obs: Tem que ter o ';' para o java funcionar;

- No nome do Arquivo deve ser utilizado o Camel Case, no caso, iniciar com maiusculo: "MinhaCalculadora.java"

Variável -> dever ser escrita com letra minuscula: "nome" 
--Mas se for composto dever escrita primeira letra da primeira palavra minuscula e a primeira letra da segunda palavra em
maiuscula: "meuNome"

- Se for colocado a palavra toda em maiuscula, ela não pode ser alterada: String BR = "Brazil"
- E se tivar a palavra "final" antes da variável, significa que ela não pode ser alterada, também, mesmo se estiver em minusculo: final String br = "Brasil"


- Deve conter apenas letras, _ (underline), $ ou os números de 0 a 9;
- Deve obrigatoriamente se iniciar por uma letra (preferencialmente), _ ou $, jamais com número;
- Deve iniciar com uma letra minúscula (boa prática – ver abaixo);
- Não pode conter espaços;
- Não podemos usar palavras-chave da linguagem;
- O nome deve ser único dentro de um escopo. 

Toda variável tem que ter -> Tipo NomeBemDefinido = Atribuicao (opcional em alguns casos)

// Exemplo

public static void main(String [] args){

int idade = 23;
double altura = 1.62;
Dog spike; //observe que aqui a variável spike não tem valor, é normal
}

-----Tipos-----

String => Imprime palavras: Qual o meu nome?;
int => Imprime números inteiros: 2;
double => Imprime numeros reais: 2.5;
float => Também números reais, mas com uma quantidade menor de bytes;
booleans => Imprime "Verdadeiro" e "Falso": false and True
char => Imprime uma letra: 'M';

-----Tipo Método----

TipoRetorno NomeObjetivoNoInfinitivo Parametro(s)

//Exemplo
public MinhaClasse{

public static void main(String [] args){

	String primeiroNome = "Samuel"
	String segundoNome = "Sansão"
}
--------Método-------

public static String nomeCompleto(String primeiroNome, String segundoNome){
	return primeiroNome.concat(" ").concat(segundoNome);

}

}
obs: Todo método tem os seus parâmetros: nomeCompleto (pararametro) -> (String primeiroNome, String segundoNome)
return -> É uma palavra reservada, significa que ela retornará alguma coisa;
concat -> É uma power class;

------Identação------

Basicamente indentar é um termo utilizado para escrever o código do programa de forma hierárquica, facilitando assim
 a visualização e o entendimento do programa.

no Visual Studio code código para identação automática
Alt + Shift + f;

------Organizando arquivos-----

À medida que nosso sistema vai evoluindo, surgem novos arquivos (código fonte) em nossa estrutura de arquivos do projeto.
Isso exige que seja realizado uma organização destes arquivos através de pacotes (packages).

------Operadores------

São simbolos especiais que utilizam para operações e expressões matemáticas ou simbolos especiais que tem um significado
próprio para a linguagem e estão assosciados a determinadas operações;
- Operador de atribuição => "=" Aplicar uma atribuição a uma variével: int nome recebe(=) 10;

----- Operadores aritméticos-----

"+" -> soma 
"-" -> subtração 
"==" -> sinal de igual 
"*" -> multiplicação 
"/" -> divisão 
"%" -> resto de uma divisão

----- Operadores unários-----

(+) Operador unário de valor positivo – números são positivos sem esse operador explicitamente;
(-) Operador unário de valor negativo – nega um número ou expressão aritmética;
(++) Operador unário de incremento de valor – incrementa o valor em 1 unidade;
(--) Operador unário de decremento de valor – decrementa o valor em 1 unidade;
(!) Operador unário lógico de negação – nega o valor de uma expressão booleana.

------ Operadores relacionais----- 

"++": número = 1 => numero = numero + 1 => numero++ => numero = 2
"--": número = 1 => numero = numero - 1 => numero-- => numero = 0
- "==" Quando desejamos verificar se uma variável é IGUAL A outra.
- "!=" Quando desejamos verificar se uma variável é DIFERENTE da outra.
- ">" Quando desejamos verificar se uma variável é MAIOR QUE a outra.
- ">=" Quando desejamos verificar se uma variável é MAIOR OU IGUAL a outra.
- "<" Quando desejamos verificar se uma variável é MENOR QUE outra.
- "<=" Quando desejamos verificar se uma variável é MENOR OU IGUAL a outra.

----- Operadores lógicos-----

- &&  Operador Lógico "E": if(numero1 == 2 & numero2 ++ == 2 )
- || Operador Lógico "OU": if(numero1 == 2 || numero2 ++ == 2 )

-----Operadores ternários-----

<Expressão Condicional> ? <Caso condição seja true> : 
<Caso condição seja false>

// EXEMPLO: String resultado = (a==b) ? "verdadeiro" : "false";
obs: "?" é o "if" e o ":" é else;


obs: O sinal de "+" em um texto, é uma concatenação;

-----Estruturação de Métodos------

Uma classe é definida por atributos e métodos. Já vimos que atributos são, 
em sua grande maioria, variáveis de diferentes tipos e valores. Os métodos,
por sua vez, correspondem a funções ou sub-rotinas disponíveis dentro de 
nossas 	classes.

OBS:  Caso o método não retorne nenhum valor, ele será representado pela palavra-chave void.

//Exemplo
public class MyClass {
	
	public double somar(int num1, int num2){
		//LOGICA - FINALIDADE DO MÉTODO
		return ... ;
	}
	
	public void imprimir(String texto){
		//LOGICA - FINALIDADE DO MÉTODO
		//AQUI NÃO PRECISA DO RETURN
		//POIS NÃO SERÁ RETORNADO NENHUM RESULTADO
	}
	// throws Exception : indica que o método ao ser utilizado
	// poderá gerar uma exceção
	public double dividir(int dividendo, int divisor) throws Exception{}
	
	// este método não pode ser visto por outras classes no projeto
	private void metodoPrivado(){}
	
	//alguns equívocos estruturais
	public void validar(){
		//este método deveria retornar algum valor
		//no caso boolean (true ou false)
	}
	public void calcularEnviar(){
		//um método deve representar uma única responsabilidade
	}
	public void gravarCliente(String nome, String cpf, Integer telefone, ....){
		//este método tem a finalidade de gravar
		//informações de um cliente, por que não criar
		//um objeto cliente e passar como parâmetro ?
		//veja abaixo
	}
	public void gravarCliente(Cliente cliente){}
	//ou
	public void gravar(Cliente cliente){}
}

->SmartTv smartTv = new SmartTv();<-
obs: Forma de criar uma classe para ilustrar a interação dos métodos e 
atributos e assim sucessivamente.

----------------Escopo de código-----------------------

O escopo pode ser entendido como,o ambiente onde uma variável pode ser 
acessada. Em Java, o escopo de variáveis vai de acordo com o bloco onde 
ela foi declarada. 

---Escopo de Classe---

---Escopo de Método---

---Escopo de Fluxo---

A variável é criada no primeiro acesso à ela, se tornando inacessível após o interpretador sair do bloco de execução, ao qual ela pertence. Portanto, esta variável não pode ser lida ou manipulada por rotinas e códigos que estão fora do seu bloco de declaração, ou seja, fora do escopo da variável. 
Em uma Classe, podemos visualizar a diferença de escopos. Os atributos (variáveis) são declarados no corpo principal da Classe, sendo portanto, acessíveis por todos os métodos. 
Caso você declare uma variável DENTRO DE UM MÉTODO, o escopo dessa variável está limitado apenas ao corpo desse método, ou seja, dentro das chaves que limitam o método.
Uma parte fundamental na elaboração de algoritmos simples ou complexos é determinar a  localização do código em questão. Sem um domínio sobre escopo de códigos, seu projeto tende a conter falhas estruturais e comprometer a proposta principal da aplicação. 
public class Conta {
	
//variavel da classe conta
	double saldo=10.0;
	
	public void sacar(Double valor) {
		//variavel local de método
		double novoSaldo = saldo - valor;
	}
	public void imprimirSaldo(){
		//disponível em toda classe
		System.out.println(saldo);
		//somente o método sacar conhece esta variavel
		System.out.println(novoSaldo);
	
	}
	public double calcularDividaExponencial(){
		
//variável local de método
		double valorParcela = 50.0;
		double valorMontante = 0.0; // começando a variável com valor zero
		for(int x=1; x<=5; x++) {//x variável de escopo de fluxo
			//esta variável será reiniciada a cada execução for
			double valorCalculado = valorParcela * x;
			valorMontante = valorMontante + valorCalculado;
		}
		
//escopo de fluxo
		//x e valorCalculado nunca estarão disponíveis fora do for
		
		return valorMontante;
	}
}
 