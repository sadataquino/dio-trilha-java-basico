--------------------------------------------------------JAVA---------------------------------------------------------------
O nome da class tem que ter o mesmo nome do arquivo, tem que ser coerente com o projeto que você almeja ou o resultado;
		|
public class NomeDoArquivo {

}
obs: a primeira letra da classe, por padrão, deve iniciar com letra maiuscula;

Se a classe é uma classe executavel, se ela tem a capacidade de realizar uma inicialização do projeto ou de forma independen
ela precisa ter um metodo principal "main";

obs: Isso é um método:
		|
public static void main(String [] args) {

	Tudo que for escrivo aqui estará dentro desse método, no caso:
		
		System.out.print("Escreva sua mensagem");
	
}
 [] -> Arrays
 args -> Argumentos
 Class -> System
 out -> Saída
 print -> Imprima
 obs: Tem que ter o ';' para o java funcionar;

- No nome do Arquivo deve ser utilizado o Camel Case, no caso, iniciar com maiusculo: "MinhaCalculadora.java"

Variável -> dever ser escrita com letra minuscula: "nome" 
--Mas se for composto dever escrita primeira letra da primeira palavra minuscula e a primeira letra da segunda palavra em
maiuscula: "meuNome"

- Se for colocado a palavra toda em maiuscula, ela não pode ser alterada: String BR = "Brazil"
- E se tivar a palavra "final" antes da variável, significa que ela não pode ser alterada, também, mesmo se estiver em minusculo: final String br = "Brasil"


- Deve conter apenas letras, _ (underline), $ ou os números de 0 a 9;
- Deve obrigatoriamente se iniciar por uma letra (preferencialmente), _ ou $, jamais com número;
- Deve iniciar com uma letra minúscula (boa prática – ver abaixo);
- Não pode conter espaços;
- Não podemos usar palavras-chave da linguagem;
- O nome deve ser único dentro de um escopo. 

Toda variável tem que ter -> Tipo NomeBemDefinido = Atribuicao (opcional em alguns casos)

// Exemplo

public static void main(String [] args){

int idade = 23;
double altura = 1.62;
Dog spike; //observe que aqui a variável spike não tem valor, é normal
}

-----Tipos-----

String => Imprime palavras: Qual o meu nome?;
int => Imprime números inteiros: 2;
double => Imprime numeros reais: 2.5;
float => Também números reais, mas com uma quantidade menor de bytes;
booleans => Imprime "Verdadeiro" e "Falso": false and True
char => Imprime uma letra: 'M';

-----Tipo Método----

TipoRetorno NomeObjetivoNoInfinitivo Parametro(s)

//Exemplo
public MinhaClasse{

public static void main(String [] args){

	String primeiroNome = "Samuel"
	String segundoNome = "Sansão"
}
--------Método-------

public static String nomeCompleto(String primeiroNome, String segundoNome){
	return primeiroNome.concat(" ").concat(segundoNome);

}

}
obs: Todo método tem os seus parâmetros: nomeCompleto (pararametro) -> (String primeiroNome, String segundoNome)
return -> É uma palavra reservada, significa que ela retornará alguma coisa;
concat -> É uma power class;

------Identação------

Basicamente indentar é um termo utilizado para escrever o código do programa de forma hierárquica, facilitando assim
 a visualização e o entendimento do programa.

no Visual Studio code código para identação automática
Alt + Shift + f;

------Organizando arquivos-----

À medida que nosso sistema vai evoluindo, surgem novos arquivos (código fonte) em nossa estrutura de arquivos do projeto.
Isso exige que seja realizado uma organização destes arquivos através de pacotes (packages).

------Operadores------

São simbolos especiais que utilizam para operações e expressões matemáticas ou simbolos especiais que tem um significado
próprio para a linguagem e estão assosciados a determinadas operações;
- Operador de atribuição => "=" Aplicar uma atribuição a uma variével: int nome recebe(=) 10;

----- Operadores aritméticos-----

"+" -> soma 
"-" -> subtração 
"==" -> sinal de igual 
"*" -> multiplicação 
"/" -> divisão 
"%" -> resto de uma divisão

----- Operadores unários-----

(+) Operador unário de valor positivo – números são positivos sem esse operador explicitamente;
(-) Operador unário de valor negativo – nega um número ou expressão aritmética;
(++) Operador unário de incremento de valor – incrementa o valor em 1 unidade;
(--) Operador unário de decremento de valor – decrementa o valor em 1 unidade;
(!) Operador unário lógico de negação – nega o valor de uma expressão booleana.

------ Operadores relacionais----- 

"++": número = 1 => numero = numero + 1 => numero++ => numero = 2
"--": número = 1 => numero = numero - 1 => numero-- => numero = 0
- "==" Quando desejamos verificar se uma variável é IGUAL A outra.
- "!=" Quando desejamos verificar se uma variável é DIFERENTE da outra.
- ">" Quando desejamos verificar se uma variável é MAIOR QUE a outra.
- ">=" Quando desejamos verificar se uma variável é MAIOR OU IGUAL a outra.
- "<" Quando desejamos verificar se uma variável é MENOR QUE outra.
- "<=" Quando desejamos verificar se uma variável é MENOR OU IGUAL a outra.

----- Operadores lógicos-----

- &&  Operador Lógico "E": if(numero1 == 2 & numero2 ++ == 2 )
- || Operador Lógico "OU": if(numero1 == 2 || numero2 ++ == 2 )

-----Operadores ternários-----

<Expressão Condicional> ? <Caso condição seja true> : 
<Caso condição seja false>

// EXEMPLO: String resultado = (a==b) ? "verdadeiro" : "false";
obs: "?" é o "if" e o ":" é else;


obs: O sinal de "+" em um texto, é uma concatenação;

-----Estruturação de Métodos------

Uma classe é definida por atributos e métodos. Já vimos que atributos são, 
em sua grande maioria, variáveis de diferentes tipos e valores. Os métodos,
por sua vez, correspondem a funções ou sub-rotinas disponíveis dentro de 
nossas 	classes.

OBS:  Caso o método não retorne nenhum valor, ele será representado pela palavra-chave void.

//Exemplo
public class MyClass {
	
	public double somar(int num1, int num2){
		//LOGICA - FINALIDADE DO MÉTODO
		return ... ;
	}
	
	public void imprimir(String texto){
		//LOGICA - FINALIDADE DO MÉTODO
		//AQUI NÃO PRECISA DO RETURN
		//POIS NÃO SERÁ RETORNADO NENHUM RESULTADO
	}
	// throws Exception : indica que o método ao ser utilizado
	// poderá gerar uma exceção
	public double dividir(int dividendo, int divisor) throws Exception{}
	
	// este método não pode ser visto por outras classes no projeto
	private void metodoPrivado(){}
	
	//alguns equívocos estruturais
	public void validar(){
		//este método deveria retornar algum valor
		//no caso boolean (true ou false)
	}
	public void calcularEnviar(){
		//um método deve representar uma única responsabilidade
	}
	public void gravarCliente(String nome, String cpf, Integer telefone, ....){
		//este método tem a finalidade de gravar
		//informações de um cliente, por que não criar
		//um objeto cliente e passar como parâmetro ?
		//veja abaixo
	}
	public void gravarCliente(Cliente cliente){}
	//ou
	public void gravar(Cliente cliente){}
}

->SmartTv smartTv = new SmartTv();<-
obs: Forma de criar uma classe para ilustrar a interação dos métodos e 
atributos e assim sucessivamente.

----------------Escopo de código-----------------------

O escopo pode ser entendido como,o ambiente onde uma variável pode ser 
acessada. Em Java, o escopo de variáveis vai de acordo com o bloco onde 
ela foi declarada. 

---Escopo de Classe---

---Escopo de Método---

---Escopo de Fluxo---

A variável é criada no primeiro acesso à ela, se tornando inacessível após o interpretador sair do bloco de execução, ao qual ela pertence. Portanto, esta variável não pode ser lida ou manipulada por rotinas e códigos que estão fora do seu bloco de declaração, ou seja, fora do escopo da variável. 
Em uma Classe, podemos visualizar a diferença de escopos. Os atributos (variáveis) são declarados no corpo principal da Classe, sendo portanto, acessíveis por todos os métodos. 
Caso você declare uma variável DENTRO DE UM MÉTODO, o escopo dessa variável está limitado apenas ao corpo desse método, ou seja, dentro das chaves que limitam o método.
Uma parte fundamental na elaboração de algoritmos simples ou complexos é determinar a  localização do código em questão. Sem um domínio sobre escopo de códigos, seu projeto tende a conter falhas estruturais e comprometer a proposta principal da aplicação. 
public class Conta {
	
//variavel da classe conta
	double saldo=10.0;
	
	public void sacar(Double valor) {
		//variavel local de método
		double novoSaldo = saldo - valor;
	}
	public void imprimirSaldo(){
		//disponível em toda classe
		System.out.println(saldo);
		//somente o método sacar conhece esta variavel
		System.out.println(novoSaldo);
	
	}
	public double calcularDividaExponencial(){
		
//variável local de método
		double valorParcela = 50.0;
		double valorMontante = 0.0; // começando a variável com valor zero
		for(int x=1; x<=5; x++) {//x variável de escopo de fluxo
			//esta variável será reiniciada a cada execução for
			double valorCalculado = valorParcela * x;
			valorMontante = valorMontante + valorCalculado;
		}
		
//escopo de fluxo
		//x e valorCalculado nunca estarão disponíveis fora do for
		
		return valorMontante;
	}
}
 

---------------------Palavras Reservadas-------------------------------------

------Tipos Primitivos------

------Classificações--------

------Escopo de Uso---------

----Palavras "opostas"------

---Controle de pacotes------

import: importa pacotes ou classes para dentro do código;
​
package: especifica a que pacote, todas as classes de um arquivo pertencem.
Modificadores de acesso
public: acesso de qualquer classe;
​
private: acesso apenas dentro da classe;
​
protected: acesso por classes no mesmo pacote e subclasses.
​
-----Primitivos-----

boolean: um valor indicando verdadeiro ou falso;
​
byte: um inteiro de 8 bits (signed);
​
char: um character unicode (16-bit unsigned);
​
double: um número de ponto flutuante de 64 bits (signed);
​
float: um número de ponto flutuante de 32 bits (signed);
​
int: um inteiro de 32 bits (signed);
​
long: um inteiro de 64 bits (signed);
​
short: um inteiro de 32 bits (signed);                                                        
​
void: indica que o método não tem retorno de valor.

-----Modificadores de classes, variáveis ou métodos------

abstract: classe que não pode ser instanciada ou método que precisa ser implementado, por uma subclasse não abstrata;
​
class: especifica uma classe;
​
extends: indica a superclasse que a subclasse está estendendo;
​
final: impossibilita que uma classe seja estendida, que um método seja sobrescrito ou que uma variável seja reinicializada;
​
implements: indica as interfaces que uma classe irá implementar;
​
interface: especifica uma interface;
​
native: indica que um método está escrito em uma linguagem dependente de plataforma, como o C;
​
new: instancia um novo objeto, chamando seu construtor;
​
static: faz um método ou variável pertencer à classe ao invés de às instâncias;
​
strictfp: usado em frente a um método ou classe para indicar que os números de ponto flutuante seguirão as regras de ponto flutuante, em todas as expressões;
​
synchronized: indica que um método só pode ser acessado por uma thread de cada vez
​
transient: impede a serialização de campos;
​
volatile: indica que uma variável pode ser alterada durante o uso de threads.;

-------Controle de fluxo dentro de um bloco de código-------

break: sai do bloco de código em que ele está;
​
case: executa um bloco de código dependendo do teste do switch;
​
continue: pula a execução do código que viria, após essa linha e vai para a próxima passagem do loop;
​
default: executa esse bloco de código caso nenhum dos teste de switch-case seja verdadeiro;
​
do: executa um bloco de código uma vez, e então realiza um teste em conjunto com o while para determinar se o bloco deverá ser executado novamente;
​
else: executa um bloco de código alternativo caso o teste "if" seja falso;
​
for: usado para realizar um loop condicional de um bloco de código;
​
if: usado para realizar um teste lógico de verdadeiro ou falso;
​
instanceof: determina se um objeto é uma instância de determinada classe, superclasse ou interface;
​
return: retorna um método sem executar qualquer código, que venha depois desta linha (também pode retornar uma variável);
​
switch: indica a variável a ser comparada nas expressões case;
​
while: executa um bloco de código repetidamente enquanto a condição for verdadeira.

-----Tratamento de erros------

assert: testa uma expressão condicional, para verificar uma suposição do programador;
​
catch: declara o bloco de código usado para tratar uma exceção;
​
finally: bloco de código, após um try-catch, que é executado independentemente do fluxo de programa seguido ao lidar com uma exceção;
​
throw: usado para passar uma exceção para o método que o chamou;
​
throws: indica que um método pode passar uma exceção para o método que o chamou;
​
try: bloco de código que tentará ser executado, mas que pode causar uma exceção.
Variáveis de referência
super: refere-se a superclasse imediata;
​
this: refere-se a instância atual do objeto.
​
-----Palavras reservadas não utilizadas-----

const: Não utilize para declarar constantes; use public static final;
​
goto: não implementada na linguagem Java, por ser considerada prejudicial.
Literais reservados
De acordo com a Java Language Specification, null, true e false são tecnicamente
chamados de valores literais, e não keywords. Se você tentar criar algum 
identificador com estes valores, você também terá um erro de compilação.


-------------Escopo de uso-------------

--Uso-------|----------Palavras-----------------------|------Observações--------------|
Arquivo	    |  package, import, static.               |                               |
------------|-----------------------------------------|-------------------------------|
            | public ou protected ou private + final  |private (em caso de ou abstract|                    
Classe      |  ou abstract + extends ou implements.   |classe interna), final         |   
            |                                         |                               |                      
------------|-----------------------------------------|-------------------------------|
            |                                         |void em caso de não ter retorno| 
​Método      | public ou protected ou private + static |ou return se houver            |
            |  ou final ou abstract + void e return.  |                               |
------------|-----------------------------------------|-------------------------------|
            |public ou protected ou private + static  |				      |
Atributo    |ou final + tipo primitivo.               |				      |	
            |                                         |                               |
------------|-----------------------------------------|-------------------------------|


-------Palavras "opostas"------------

-----Palavra------|----------------|----------------Explicação-----------------------------|
                  |                |                                                       |
package           | Import         | Enquanto package determina o diretório real da classe,| 
                  |                | o import informa de onde será importada a classe. Isso| 
                  |                | porque, podemos ter classes de mesmo nome.            |
------------------|----------------|-------------------------------------------------------|
                  |                |                                                       | 
                  |                |                                                       |
extends           | implements     | enquanto extends determina que uma classe estende     |  
                  |                | outra classe, implements determina que uma classe     |
                  |                | implementa uma interface, porém nunca o contrário.    |
                  |                |                                                       |
------------------|----------------|-------------------------------------------------------|
                  |                | enquanto final determina fim de alteração de valor ou |
                  |                | lógica comportamental, abstract em métodos, exige que |
final             | abstract       | sub-classes precisarão definir comportamento e um     |
                  |                | método abstrato. NOTA: Se uma classe contém um único  |
                  |                | método abstrato, toda classe precisa ser.             |
                  |                |                                                       |
------------------|----------------|-------------------------------------------------------|
                  |                |Esta é uma das situações mais complicadas, de          |
                  |                |compreensão destas duas palavras. Enquanto a throws    |
throws            | throw          |determina que um método pode lançar uma exceção, throw |
                  |                |é a implementação que dispara a exceção. Vamos conhecer| 
                  |                |mais sobre este conceito no assunto Exceções.          |
------------------|----------------|-------------------------------------------------------|


-------------Java DOC-----------------------

Apresentar a ferramenta de documentação da linguagem e explorar como adicionar comentários em nossos
arquivos.

------ Documentação oficial-------

------ Tags-----------------------

------ Tipos de comentários-------

------ Javadoc--------------------


https://docs.oracle.com/javase/7/docs/api/java/lang/String.html

---------Tags---------------------
/**
* <h1>Calculadora</h1>
* A Calculadora realiza operações matemáticas entre números inteiros
* <p>
* <b>Note:</b> Leia atentamente a documentação desta classes
* para desfrutar dos recursos oferecidos pelo autor
*
* @author  Sadat Aquino
* @version 1.0
* @since   27/10/2022
*/
public class Calculadora {
    /**
   * Este método é utilizado para somar dois números inteiros
   * @param numeroUm este é o primeiro parâmetro do método
   * @param numeroDois este é o segundo parâmetro do método
   * @return int o resultado deste método é a soma dos dois números.
   */
    public int somar(int numeroUm, int numeroDois) {
        return  numeroUm + numeroDois;
    }
}


--------------Terminal e Argumentos--------------------

Explorar opções de entrada e saída simples de dados em uma aplicação em Java.

------main args--------

------Scanner----------

---Execução via IDE----

------Execução via prompt de comando--------

CMD ou MS-DOS => Para executar no terminal precisa digitar java (e o nome do arquivo) sem o .class, mas se o teu programa 
não compilor, então, será digitado javac (o nome do arquivo).class, primeiro.  






















